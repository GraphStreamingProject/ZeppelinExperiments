Prior to building any executables, make sure the CILK flag environment
variable is set by entering "export CILK=1" in the
console you'll be building in.

//////////////// DEPENDENCIES ////////////////

OpenCilk compiler version 1.0+ (we used version 1.0)
https://github.com/OpenCilk/opencilk-project
After building the compiler, add the build/bin directory to your $PATH.

//////////////// SPEED AND MEMORY TEST ////////////////

To build the executable for the speed and memory consumption test, run 
"make ingestion_test"

The command line arguments to the resulting "ingestion_test" executable are as
follows:

1. Path to the (binary) stream file
2. Update batch size. Unlike our system, Terrace is not designed to process updates at the granularity of a single edge. Instead,
   Terrace only accepts updates in batches of a single type (i.e. either all edge insertions or all edge deletions). This parameter controls how
   large this batch should be. We used a batch size of 1,000,000 for the results we reported in the paper.
3. Buffer size. This parameter controls how many edges we should retrieve from external memory at once. We used a buffer size of
   1,000,000 for the results we reported in the paper.
4. Path to file to write timing data.

If you'd like to take a closer look at the actual source code of the
speed and memory consumtion test, you may find it in
./code/src/ingestion_test.cpp.


//////////////// CONTINUOUS QUERY TESTING ////////////////

To build the executable for the continuous query testing experiment, run 
"make continuous_query_test"

The command line arguments to the resulting "cont_query" executable are as
follows:

1. Path to the (binary) stream file
2. Update batch size. Unlike our system, Terrace is not designed to process updates at the granularity of a single edge. Instead,
   Terrace only accepts updates in batches of a single type (i.e. either all edge insertions or all edge deletions). This parameter controls how
   large this batch should be. We used a batch size of 1,000,000 for the results we reported in the paper.
3. Buffer size. This parameter controls how many edges we should retrieve from external memory at once. We used a buffer size of
   1,000,000 for the results we reported in the paper.
4. Path to file where we record the results of continuous query testing.
5. Number of CC queries. If this parameter is X, then we perform X connected components queries every 1/X of the way through the stream.

If you'd like to take a closer look at the actual source code of the
continuous query test, you may find it in 
./code/src/continuous_query_test.cpp

